package main

import (
	"flag"
	"fmt"
	"html/template"
	"log"
	"net/http"
	"os"
	"strings"
	"io/ioutil"
)

const (
	// Courtesy of "telnet mapascii.me"                                                               
	MAP_ASCII_ART    = "static/img/mapascii.txt"
        LOGO_ASCII_ART   = "static/img/REPLACE_LOGO"
	escape = "\x1b"
	colour_me_yellow = escape + "[1;33m"
	colour_me_normal = escape + "[0;0m"
)

var (
	mux        = http.NewServeMux()
	listenAddr string
)

type (
	Content struct {
		Title    string
		Hostname string
	}
)

func init() {
	flag.StringVar(&listenAddr, "listen", ":8080", "listen address")
}

func loadTemplate(filename string) (*template.Template, error) {
	return template.ParseFiles(filename)
}

func CaseInsensitiveContains(s, substr string) bool {
        s, substr = strings.ToUpper(s), strings.ToUpper(substr)
        return strings.Contains(s, substr)
}

func index(w http.ResponseWriter, r *http.Request) {
	log.Printf("Request from '%s' (%s)\n", r.Header.Get("X-Forwarded-For"), r.URL.Path)

	hostname, err := os.Hostname()
	if err != nil {
		hostname = "unknown"
	}

        // Get user-agent: if text-browser, e.g. wget/curl/httpie/lynx/elinks return ascii-text image:
        userAgent := r.Header.Get("User-Agent")

        if CaseInsensitiveContains(userAgent, "wget") ||
           CaseInsensitiveContains(userAgent, "curl") ||
           CaseInsensitiveContains(userAgent, "httpie") ||
           CaseInsensitiveContains(userAgent, "links") ||
           CaseInsensitiveContains(userAgent, "lynx")
           {
           w.Header().Set("Content-Type", "text/txt")

           var content []byte

	   if r.URL.Path == "/map" || r.URL.Path == "/MAP" {
	       content, _ = ioutil.ReadFile( MAP_ASCII_ART )
           } else {
	       content, _ = ioutil.ReadFile( LOGO_ASCII_ART )
           }

	   w.Write([]byte(content))
           fmt.Fprintf(w, "\nServed from container %s%s%s\n", colour_me_yellow, hostname, colour_me_normal)

	   return
	}

	// Get user-agent: else return html as normal ...
	t, err := loadTemplate("templates/index.html.tmpl")
	if err != nil {
		log.Printf("error loading template: %s\n", err)
		return
	}

	title := os.Getenv("TITLE")

	cnt := &Content{
		Title:    title,
		Hostname: hostname,
	}

        // apply Context values to template
	t.Execute(w, cnt)
}

func ping(w http.ResponseWriter, r *http.Request) {
	resp := fmt.Sprintf("ping: hello %s\n", r.RemoteAddr)
	w.Write([]byte(resp))
}

func main() {
	flag.Parse()

	mux.Handle("/static/", http.StripPrefix("/static/", http.FileServer(http.Dir("./static"))))
	mux.HandleFunc("/", index)

	mux.HandleFunc("/ping", ping)
	mux.HandleFunc("/PING", ping)

	mux.HandleFunc("/MAP", index)
	mux.HandleFunc("/map", index)

	log.Printf("listening on %s\n", listenAddr)

	if err := http.ListenAndServe(listenAddr, mux); err != nil {
		log.Fatalf("error serving: %s", err)
	}
}
